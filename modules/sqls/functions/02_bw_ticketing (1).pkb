CREATE OR REPLACE PACKAGE BODY
  -------------------------------------------------------------------
  --   (C) 2020 by RS2Group International.
  --
  --   NAME: BW_TICKETING.pkb
  --
  --   DESCRIPTION: Package implementation for disputes.
  --
  --   VERSION: 1.0.2
  --
  --   DATE: 05 Jan 2022
  --
  --   NOTES: This package provides the implementation to create and maintain tickets
  -------------------------------------------------------------------

BW_TICKETING AS
  PROCEDURE GETUSERIDFROMGROUP(P_INSTITUTION_NUMBER VARCHAR2, P_GROUPID VARCHAR2, P_USERID OUT VARCHAR2)
  IS
    CURSOR GROUP_USER_ASSIGN_LIMIT_CURSOR IS
      WITH TOTAL_TICKETS AS
        (SELECT
          TICKET_ACTION.ASSIGNED_USER,
          TICKET_ACTION.INSTITUTION_NUMBER,
          COUNT(*) CNT
        FROM CIS_TICKET_ACTION TICKET_ACTION
        WHERE TICKET_ACTION.INSTITUTION_NUMBER = P_INSTITUTION_NUMBER
          AND TICKET_ACTION.TICKET_ACTION_ID = (
                                  SELECT MAX(TICKET_ACTION_ID)
                                  FROM CIS_TICKET_ACTION SUB_ACTION
                                  WHERE SUB_ACTION.INSTITUTION_NUMBER = TICKET_ACTION.INSTITUTION_NUMBER
                                  AND SUB_ACTION.TICKET_NUMBER = TICKET_ACTION.TICKET_NUMBER)
          AND TICKET_ACTION.TICKET_STATUS < '006'
        GROUP BY TICKET_ACTION.ASSIGNED_USER, TICKET_ACTION.INSTITUTION_NUMBER)

        SELECT USERS.USERID
        FROM SYS_TICKET_GROUP_USERS USERS,
          SYS_TICKET_USER_SETTINGS SETTINGS,
          TOTAL_TICKETS
        WHERE USERS.GROUPID = P_GROUPID
          AND USERS.INSTITUTION_NUMBER = P_INSTITUTION_NUMBER
          AND SETTINGS.INSTITUTION_NUMBER = USERS.INSTITUTION_NUMBER
          AND SETTINGS.USERID = USERS.USERID
          AND TOTAL_TICKETS.INSTITUTION_NUMBER = SETTINGS.INSTITUTION_NUMBER
          AND TOTAL_TICKETS.ASSIGNED_USER = SETTINGS.USERID
          AND TOTAL_TICKETS.CNT < SETTINGS.ASSIGN_LIMIT
        GROUP BY USERS.GROUPID, USERS.USERID, TOTAL_TICKETS.CNT, SETTINGS.ASSIGN_LIMIT
        ORDER BY TOTAL_TICKETS.CNT;
    --
    CURSOR GROUP_USER_CURSOR IS
      SELECT
        USERS.USERID,
        (
          SELECT COUNT(*)
          FROM CIS_TICKET_ACTION TICKET_ACTION
          WHERE TICKET_ACTION.TICKET_ACTION_ID = (
                        SELECT MAX(TICKET_ACTION_ID)
                        FROM CIS_TICKET_ACTION SUB_ACTION
                        WHERE SUB_ACTION.INSTITUTION_NUMBER = TICKET_ACTION.INSTITUTION_NUMBER
                        AND SUB_ACTION.TICKET_NUMBER = TICKET_ACTION.TICKET_NUMBER)
            AND TICKET_ACTION.INSTITUTION_NUMBER = USERS.INSTITUTION_NUMBER
            AND TICKET_ACTION.ASSIGNED_USER = USERS.USERID
            AND TICKET_ACTION.TICKET_STATUS < '006'
        ) AS TOTAL_TICKETS
      FROM
        SYS_TICKET_GROUP_USERS USERS,
        SYS_TICKET_USER_SETTINGS SETTINGS
      WHERE USERS.INSTITUTION_NUMBER = P_INSTITUTION_NUMBER
        AND USERS.GROUPID = P_GROUPID
        AND SETTINGS.INSTITUTION_NUMBER = USERS.INSTITUTION_NUMBER
        AND SETTINGS.USERID = USERS.USERID
      GROUP BY USERS.INSTITUTION_NUMBER, USERS.GROUPID, USERS.USERID, SETTINGS.ASSIGN_LIMIT
      ORDER BY TOTAL_TICKETS;
    --
    BEGIN
      FOR CURSOR_RECORD IN GROUP_USER_ASSIGN_LIMIT_CURSOR LOOP
        P_USERID := CURSOR_RECORD.USERID;
        RETURN;
      END LOOP;
      --
      FOR CURSOR_RECORD IN GROUP_USER_CURSOR LOOP
        P_USERID := CURSOR_RECORD.USERID;
        RETURN;
      END LOOP;
    END;

  PROCEDURE GETUSERIDFROMTICKETREASON(P_INSTITUTION_NUMBER VARCHAR2, P_TICKETREASON VARCHAR2, P_USERID OUT VARCHAR2, P_GROUPID OUT VARCHAR2)
  IS
    BEGIN
      BEGIN
        SELECT GROUPID
        INTO P_GROUPID
        FROM (
          SELECT
            GRP.GROUPID,
            (
              SELECT COUNT(*)
              FROM
                CIS_TICKET TICKETS,
                CIS_TICKET_ACTION TICKET_ACTION,
                SYS_TICKET_GROUP_USERS GRPUSERS
              WHERE TICKETS.TICKET_NUMBER = TICKET_ACTION.TICKET_NUMBER
                AND TICKETS.INSTITUTION_NUMBER = TICKET_ACTION.INSTITUTION_NUMBER
                AND TICKET_ACTION.ASSIGNED_USER = GRPUSERS.USERID
                AND TICKET_ACTION.ACTION_DATE || TICKET_ACTION.ACTION_TIME = (SELECT MAX(ACTION_DATE || ACTION_TIME)
                                                          FROM CIS_TICKET_ACTION C
                                                          WHERE C.TICKET_NUMBER = TICKET_ACTION.TICKET_NUMBER
                                                          AND C.INSTITUTION_NUMBER = TICKET_ACTION.INSTITUTION_NUMBER)
                AND TICKET_STATUS < '006'
                AND GRPUSERS.GROUPID = GRP.GROUPID
            ) AS TOTAL
          FROM
            CBR_TICKET_GROUP GRP,
            CBR_TICKET_DEFAULT_GROUP TICKET_GRP,
            SYS_TICKET_GROUP_USERS GRP_USERS
          WHERE ROWNUM = 1
            AND GRP.INSTITUTION_NUMBER = P_INSTITUTION_NUMBER
            AND TICKET_GRP.INSTITUTION_NUMBER = GRP.INSTITUTION_NUMBER
            AND TICKET_GRP.GROUP_ID = GRP.GROUPID
            AND TICKET_GRP.TICKET_REASON = P_TICKETREASON
            AND GRP_USERS.INSTITUTION_NUMBER = GRP.INSTITUTION_NUMBER
            AND GRP_USERS.GROUPID = GRP.GROUPID
          ORDER BY TOTAL
        );

        EXCEPTION
        WHEN NO_DATA_FOUND THEN BEGIN

        SELECT GROUPID
        INTO P_GROUPID
        FROM (
          SELECT
            TICKET_GROUP.GROUPID,
            (
              SELECT COUNT(*)
              FROM
                CIS_TICKET TICKET,
                CIS_TICKET_ACTION TICKET_ACTION,
                SYS_TICKET_GROUP_USERS GROUP_USERS
              WHERE TICKET_ACTION.INSTITUTION_NUMBER = TICKET.INSTITUTION_NUMBER
                AND TICKET_ACTION.TICKET_NUMBER = TICKET.TICKET_NUMBER
                AND TICKET_ACTION.ACTION_DATE || TICKET_ACTION.ACTION_TIME = (SELECT MAX(ACTION_DATE || ACTION_TIME)
                                                          FROM CIS_TICKET_ACTION C
                                                          WHERE C.INSTITUTION_NUMBER = TICKET_ACTION.INSTITUTION_NUMBER
                                                          AND C.TICKET_NUMBER = TICKET_ACTION.TICKET_NUMBER)
                AND TICKET_ACTION.TICKET_STATUS < '006'
                AND GROUP_USERS.USERID = TICKET_ACTION.ASSIGNED_USER
                AND GROUP_USERS.GROUPID = TICKET_GROUP.GROUPID
            ) AS TOTAL
          FROM
            CBR_TICKET_GROUP TICKET_GROUP,
            SYS_TICKET_GROUP_USERS GROUP_USERS
          WHERE ROWNUM = 1
            AND TICKET_GROUP.INSTITUTION_NUMBER = P_INSTITUTION_NUMBER
            AND TICKET_GROUP.INSTITUTION_NUMBER = GROUP_USERS.INSTITUTION_NUMBER
             AND TICKET_GROUP.GROUPID = GROUP_USERS.GROUPID
          ORDER BY TOTAL
        );
      END;
    END;

    GETUSERIDFROMGROUP(P_INSTITUTION_NUMBER, P_GROUPID, P_USERID);
  END;

  PROCEDURE CREATETICKET(
    P_INSTITUTIONNUMBER VARCHAR2,
    P_CLIENTNUMBER      VARCHAR2,
    P_GROUPNUMBER       VARCHAR2,
    P_CREATIONUSER      VARCHAR2,
    P_CREATIONUSERTYPE  VARCHAR2,
    P_TICKETREASON      VARCHAR2,
    P_DESCRIPTION       VARCHAR2,
    P_CASE_NUMBER       VARCHAR2,
    P_TICKETNUMBER OUT  VARCHAR2)
  AS
    ASSIGNED_USER    VARCHAR2(255);
    ASSIGNED_GROUP   VARCHAR2(255);
    PRIORITY_LEVEL   VARCHAR2(255);
    P_TICKETACTIONID VARCHAR2(16);
    BEGIN
      GETUSERIDFROMTICKETREASON(P_INSTITUTIONNUMBER, P_TICKETREASON, ASSIGNED_USER, ASSIGNED_GROUP);
      IF ASSIGNED_USER IS NOT NULL
      THEN

        SELECT BW_CODE_LIBRARY.BWS_GET_SEQ_NUMBER('086', 1, P_INSTITUTIONNUMBER)
        INTO P_TICKETNUMBER
        FROM DUAL;

        INSERT INTO CIS_TICKET
        (
          INSTITUTION_NUMBER,
          TICKET_NUMBER,
          TICKET_REASON,
          CREATION_DATE,
          DESCRIPTION,
          CLIENT_NUMBER,
          GROUP_NUMBER,
          CREATION_USER,
          CREATION_USER_TYPE,
          CASE_NUMBER,
          AUDIT_TRAIL,
          LOCKING_COUNTER
        )
        VALUES
          (
            P_INSTITUTIONNUMBER,
            P_TICKETNUMBER,
            P_TICKETREASON,
            TO_CHAR(CURRENT_DATE, 'YYYYMMDD'),
            P_DESCRIPTION,
            P_CLIENTNUMBER,
            P_GROUPNUMBER,
            P_CREATIONUSER,
            P_CREATIONUSERTYPE,
            P_CASE_NUMBER,
            '',
            ''
          );

        SELECT DEFAULT_PRIORITY
        INTO PRIORITY_LEVEL
        FROM BWT_TICKET_REASON
        WHERE INDEX_FIELD = P_TICKETREASON
              AND INSTITUTION_NUMBER = P_INSTITUTIONNUMBER
              AND LANGUAGE = 'USA';

        ADDTICKETHISTORY(
            P_INSTITUTIONNUMBER,
            P_TICKETNUMBER,
            P_CREATIONUSER,
            P_CREATIONUSERTYPE,
            '001',
            P_DESCRIPTION,
            ASSIGNED_USER,
            ASSIGNED_GROUP,
            PRIORITY_LEVEL,
            '001',
            P_TICKETACTIONID
        );

      END IF;

      COMMIT;
    END;

  PROCEDURE ADDTICKETHISTORY(
    P_INSTITUTIONNUMBER  VARCHAR2,
    P_TICKETNUMBER       VARCHAR2,
    P_ACTIONUSERID       VARCHAR2,
    P_ACTIONUSERTYPE     VARCHAR2,
    P_TICKETACTION       VARCHAR2,
    P_NOTETEXT           VARCHAR2,
    P_ASSIGNEDUSER       VARCHAR2,
    P_ASSIGNEDGROUP      VARCHAR2,
    P_PRIORITYLEVEL      VARCHAR2,
    P_TICKETSTATUS       VARCHAR2,
    P_TICKETACTIONID OUT VARCHAR2)
  AS
    TICKETACTIONID VARCHAR2(16);

    DEADLINE       VARCHAR2(8);
    BEGIN

      SELECT BW_CODE_LIBRARY.BWS_GET_SEQ_NUMBER('087', 1, P_INSTITUTIONNUMBER)
      INTO TICKETACTIONID
      FROM DUAL;

      SELECT TO_CHAR(SYSDATE + NUMBER_OF_DAYS, 'YYYYMMDD')
      INTO DEADLINE
      FROM CHT_TICKET_PRIORITY_LEVEL
      WHERE INDEX_FIELD = P_PRIORITYLEVEL
            AND LANGUAGE = 'USA';

      INSERT INTO CIS_TICKET_ACTION
      (
        INSTITUTION_NUMBER,
        TICKET_ACTION_ID,
        TICKET_NUMBER,
        ACTION_USER_ID,
        ACTION_USER_TYPE,
        ACTION_DATE,
        ACTION_TIME,
        TICKET_ACTION,
        NOTE_TEXT,
        ASSIGNED_USER,
        ASSIGNED_GROUP,
        PRIORITY_LEVEL,
        TICKET_STATUS,
        DEADLINE_DATE,
        AUDIT_TRAIL,
        LOCKING_COUNTER
      )
      VALUES
        (
          P_INSTITUTIONNUMBER,
          TICKETACTIONID,
          P_TICKETNUMBER,
          P_ACTIONUSERID,
          P_ACTIONUSERTYPE,
          TO_CHAR(SYSDATE, 'YYYYMMDD'),
          TO_CHAR(SYSDATE, 'HH24:MI:SS'),
          P_TICKETACTION,
          P_NOTETEXT,
          P_ASSIGNEDUSER,
          P_ASSIGNEDGROUP,
          P_PRIORITYLEVEL,
          P_TICKETSTATUS,
          DEADLINE,
          '',
          ''
        );

      COMMIT;
    END;

  PROCEDURE REASSIGNTICKET(P_INSTITUTIONNUMBER VARCHAR2, P_TICKETNUMBER VARCHAR2, P_NEWGROUP VARCHAR2) IS
    P_USERID VARCHAR2(8);
    BEGIN
      FOR TICKET IN (
      SELECT *
      FROM CIS_TICKET_ACTION
      WHERE INSTITUTION_NUMBER = P_INSTITUTIONNUMBER
      AND TICKET_ACTION_ID = (SELECT MAX(TICKET_ACTION_ID)
                                FROM CIS_TICKET_ACTION
                                WHERE INSTITUTION_NUMBER = P_INSTITUTIONNUMBER
                                AND TICKET_NUMBER = P_TICKETNUMBER)
      ) LOOP
        GETUSERIDFROMGROUP(P_INSTITUTIONNUMBER, P_NEWGROUP, P_USERID);

        ADDTICKETHISTORY(
            TICKET.INSTITUTION_NUMBER,
            TICKET.TICKET_NUMBER,
            TICKET.ACTION_USER_ID,
            TICKET.ACTION_USER_TYPE,
            TICKET.TICKET_ACTION,
            TICKET.NOTE_TEXT,
            P_USERID,
            P_NEWGROUP,
            TICKET.PRIORITY_LEVEL,
            TICKET.TICKET_STATUS,
            TICKET.TICKET_ACTION_ID);
      END LOOP;
    END;

END;
/
