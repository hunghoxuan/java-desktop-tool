{
	"info": {
		"_postman_id": "bbf46ddd-62b2-4083-96f3-74513e7d8541",
		"name": "ALTO-REGRESSION_V2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Queries",
			"item": [
				{
					"name": "Starting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"onboardingMerchants\",",
									"[",
									"    {   // Blended merchant hierarchy",
									"        \"hierarchy\": false, //false is to create standalone - true is to create hierarchy",
									"        \"serviceContractId\":\"serviceContractId=101\", \"clientNumber\":\"88888900\", \"ourReference\":\"900000088888900\", ",
									"        \"groupLevel\":  ",
									"        {   \"clientLevel\":\"002\", \"clientTariff\":\"000000\", \"clientScheme\":\"000000\", \"tierGroup\":\"000\", \"chargeTierLevel\":\"000\", \"businessClass\":\"4121\", \"settlementPackages\": [ ],",
									"            \"accountDefinitions\": [ {\"accountType\":\"007\", \"statementType\":\"000\", \"settlementPackageId\":\"\"}, {\"accountType\":\"012\", \"statementType\":\"000\", \"settlementPackageId\":\"\"} ],",
									"            \"addressCategories\": [ \"001\",\"006\",\"022\" ],",
									"            \"subGroupLevel\":  ",
									"            [   {   \"clientLevel\":\"003\", \"clientTariff\":\"000000\",\"clientScheme\":\"000000\",\"tierGroup\":\"000\",\"chargeTierLevel\":\"000\", \"businessClass\":\"4121\", \"settlementPackages\": [ ],",
									"                    \"accountDefinitions\": [ {\"accountType\":\"007\", \"statementType\":\"000\", \"settlementPackageId\":\"\"},{\"accountType\":\"012\", \"statementType\":\"000\", \"settlementPackageId\":\"\"} ],",
									"                    \"addressCategories\": [ \"001\",\"006\",\"022\" ],",
									"                    \"Members\":   ",
									"                    [   {   \"tradeName\":\"Merchant Fixed Tariff\",",
									"                            \"clientLevel\":\"001\", \"clientTariff\":\"000000\", \"clientScheme\":\"000000\", \"tierGroup\":\"000\", \"chargeTierLevel\":\"000\", \"businessClass\":\"4121\",",
									"                            \"settlementMethod\":\"003\",",
									"                            \"settlementPackages\":[ {\"accountType\":\"007\",\"bankAccount\":\"0000099999003002\",\"fundingClient\":\"clientNumber=00000114\"},{\"accountType\":\"012\",\"bankAccount\":\"0000099999003001\",\"fundingClient\":\"clientNumber=00000114\"}],",
									"                            \"accountDefinitions\":[ {\"accountType\":\"007\", \"statementType\":\"000\", \"settlementPackageId\":\"\"},{\"accountType\":\"012\", \"statementType\":\"000\", \"settlementPackageId\":\"\"}],",
									"                            \"addressCategories\":[\"001\",\"006\",\"022\"],",
									"                            \"services\": ",
									"                            [   {\"serviceId\":\"101\",\"tariff\":\"000100\"},",
									"                                {\"serviceId\":\"201\",\"tariff\":\"000100\"}, ",
									"                                {\"serviceId\":\"102\",\"tariff\":\"000103\"}, ",
									"                                {\"serviceId\":\"718\",\"tariff\":\"000103\"},",
									"                                {\"serviceId\":\"300\",\"tariff\":\"000000\"}",
									"                            ],",
									"                            \"no_of_stores\": 5",
									"                        },",
									"                        {   \"tradeName\":\"Merchant IC Plus\",",
									"                            \"clientLevel\":\"001\", \"clientTariff\":\"000000\", \"clientScheme\":\"000000\", \"tierGroup\":\"000\", \"chargeTierLevel\":\"000\", \"businessClass\":\"6051\",",
									"                            \"settlementMethod\":\"003\",",
									"                            \"settlementPackages\":[ {\"accountType\":\"007\",\"bankAccount\":\"0000099999003002\",\"fundingClient\":\"clientNumber=00000114\"},{\"accountType\":\"012\",\"bankAccount\":\"0000099999003001\",\"fundingClient\":\"clientNumber=00000114\"}],",
									"                            \"accountDefinitions\":[ {\"accountType\":\"007\", \"statementType\":\"000\", \"settlementPackageId\":\"\"},{\"accountType\":\"012\", \"statementType\":\"000\", \"settlementPackageId\":\"\"}],",
									"                            \"addressCategories\":[\"001\",\"006\",\"022\"],",
									"                            \"services\": ",
									"                            [   {\"serviceId\":\"101\",\"tariff\":\"000100\"},",
									"                                {\"serviceId\":\"201\",\"tariff\":\"000100\"}, ",
									"                                {\"serviceId\":\"102\",\"tariff\":\"000103\"}, ",
									"                                {\"serviceId\":\"718\",\"tariff\":\"000103\"},",
									"                                {\"serviceId\":\"300\",\"tariff\":\"000000\"}",
									"                            ],",
									"                            \"no_of_stores\": 5",
									"                        },",
									"                        {    \"tradeName\":\"Merchant Live Txn Only\",",
									"                            \"clientLevel\":\"001\", \"clientTariff\":\"000000\", \"clientScheme\":\"000000\", \"tierGroup\":\"000\", \"chargeTierLevel\":\"000\", \"businessClass\":\"5812\",",
									"                            \"settlementMethod\":\"001\",",
									"                            \"settlementPackages\":[ {\"accountType\":\"007\",\"bankAccount\":\"0000099999003002\",\"fundingClient\":\"clientNumber=00000114\"},{\"accountType\":\"012\",\"bankAccount\":\"0000099999003001\",\"fundingClient\":\"clientNumber=00000114\"}],",
									"                            \"accountDefinitions\":[ {\"accountType\":\"007\", \"statementType\":\"000\", \"settlementPackageId\":\"\"},{\"accountType\":\"012\", \"statementType\":\"000\", \"settlementPackageId\":\"\"}],",
									"                            \"addressCategories\":[\"001\",\"006\",\"022\"],",
									"                            \"services\": ",
									"                            [   {\"serviceId\":\"101\",\"tariff\":\"000100\"},",
									"                                {\"serviceId\":\"201\",\"tariff\":\"000100\"}, ",
									"                                {\"serviceId\":\"102\",\"tariff\":\"000103\"}, ",
									"                                {\"serviceId\":\"718\",\"tariff\":\"000103\"},",
									"                                {\"serviceId\":\"300\",\"tariff\":\"000000\"}",
									"                            ],",
									"                            \"no_of_stores\": 5",
									"                        },",
									"                        {   \"tradeName\":\"Merchant Exception TC\",",
									"                            \"clientLevel\":\"001\", \"clientTariff\":\"000000\",\"clientScheme\":\"000000\", \"tierGroup\":\"000\", \"chargeTierLevel\":\"000\", \"businessClass\":\"4215\",",
									"                                \"settlementMethod\":\"003\",",
									"                            \"settlementPackages\":[ {\"accountType\":\"007\",\"bankAccount\":\"0000099999003002\",\"fundingClient\":\"clientNumber=00000114\"},{\"accountType\":\"012\",\"bankAccount\":\"0000099999003001\",\"fundingClient\":\"clientNumber=00000114\"}],",
									"                            \"accountDefinitions\":[ {\"accountType\":\"007\", \"statementType\":\"000\", \"settlementPackageId\":\"\"},{\"accountType\":\"012\", \"statementType\":\"000\", \"settlementPackageId\":\"\"}],",
									"                            \"addressCategories\":[\"001\",\"006\",\"022\"],",
									"                            \"services\": ",
									"                            [   {\"serviceId\":\"101\",\"tariff\":\"000100\"},",
									"                                {\"serviceId\":\"201\",\"tariff\":\"000100\"}, ",
									"                                {\"serviceId\":\"102\",\"tariff\":\"000103\"}, ",
									"                                {\"serviceId\":\"718\",\"tariff\":\"000103\"},",
									"                                {\"serviceId\":\"300\",\"tariff\":\"000000\"}",
									"                            ],",
									"                            \"no_of_stores\": 5",
									"                        }",
									"                    ]",
									"                }",
									"            ]",
									"        }",
									"    }",
									"]",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for a successful status code",
									"tests[\"Status Code 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody); // Parse response body",
									"    onboardingMerchants = pm.environment.get(\"onboardingMerchants\");",
									"    parentClient = \"\";",
									"    subParentClient = \"\";",
									"    processing = [];",
									"",
									"tests[\"Valid Access Token\"] = data.access_token !== null && data.access_token !== \"\"; // Test for the presence of an access token",
									"tests[\"Valid Refresh Token\"] = data.refresh_token !== null && data.refresh_token !== \"\"; // Test for the presence of an refresh token",
									"tests[\"Valid Token Type\"] = data.token_type === \"bearer\"; // Test for a valid token type",
									"",
									"// Test teardown: Set global variables",
									"pm.environment.set(\"token\", data.access_token);",
									"pm.environment.set(\"refresh_token\", data.refresh_token);",
									"",
									"//read hierarchy and create client's data",
									"pm.environment.set(\"serviceContractId\",onboardingMerchants[0].serviceContractId);",
									"",
									"for (i = 0; i < onboardingMerchants.length; i++)",
									"{",
									"    clientNumber = onboardingMerchants[i][\"clientNumber\"];",
									"    ourReference = onboardingMerchants[i][\"ourReference\"];",
									"",
									"    if (onboardingMerchants[i][\"hierarchy\"] == false)",
									"        {",
									"            for (member = 0; member < onboardingMerchants[i].groupLevel.subGroupLevel[0].Members.length; member++)",
									"            {   ",
									"                for (total = 0; total < onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].no_of_stores; total++)",
									"                {",
									"                    processing.push({   \"hierarchy\": false,",
									"                                        \"serviceContractId\": onboardingMerchants[i].serviceContractId,",
									"                                        \"clientNumber\": clientNumber,",
									"                                        \"parentClientNumber\": \"\",",
									"                                        \"ourReference\": ourReference,",
									"                                        \"clientLevel\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].clientLevel,",
									"                                        \"clientTariff\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].clientTariff,",
									"                                        \"clientScheme\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].clientScheme,",
									"                                        \"settlementMethod\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].settlementMethod,",
									"                                        \"tradeName\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].tradeName,",
									"                                        \"tierGroup\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].tierGroup,",
									"                                        \"chargeTierLevel\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].chargeTierLevel,",
									"                                        \"businessClass\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].businessClass,",
									"                                        \"settlementPackages\":onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].settlementPackages,",
									"                                        \"accountDefinitions\": onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].accountDefinitions,",
									"                                        \"addressCategories\":onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].addressCategories,",
									"                                        \"services\": onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].services,",
									"                                        \"deviceFees\": onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].deviceFees",
									"                                    });",
									"                    clientNumber = String(Number(clientNumber) + 1);",
									"                    ourReference = String(Number(ourReference) + 1);",
									"                }",
									"            }",
									"        }",
									"    else",
									"        {   processing.push({   \"hierarchy\": true,",
									"                                \"serviceContractId\": onboardingMerchants[i].serviceContractId,",
									"                                \"clientNumber\": clientNumber,",
									"                                \"parentClientNumber\": \"\",",
									"                                \"ourReference\": ourReference,",
									"                                \"clientLevel\" : onboardingMerchants[i].groupLevel.clientLevel,",
									"                                \"clientTariff\" : onboardingMerchants[i].groupLevel.clientTariff,",
									"                                \"clientScheme\" : onboardingMerchants[i].groupLevel.clientScheme,",
									"                                \"tierGroup\" : onboardingMerchants[i].groupLevel.tierGroup,",
									"                                \"chargeTierLevel\" : onboardingMerchants[i].groupLevel.chargeTierLevel,",
									"                                \"businessClass\" : onboardingMerchants[i].groupLevel.businessClass,",
									"                                \"settlementPackages\": onboardingMerchants[i].groupLevel.settlementPackages,",
									"                                \"accountDefinitions\": onboardingMerchants[i].groupLevel.accountDefinitions,",
									"                                \"addressCategories\": onboardingMerchants[i].groupLevel.addressCategories",
									"                            });",
									"            parentClient = \"clientNumber=\" + String(clientNumber);",
									"            clientNumber = String(Number(clientNumber) + 1);",
									"            ourReference = String(Number(ourReference) + 1);",
									"",
									"            for (subgroup = 0; subgroup < onboardingMerchants[i].groupLevel.subGroupLevel.length; subgroup++)",
									"            {",
									"                processing.push({   \"hierarchy\": true,",
									"                                    \"serviceContractId\": onboardingMerchants[i].serviceContractId,",
									"                                    \"clientNumber\": clientNumber,",
									"                                    \"parentClientNumber\": parentClient,",
									"                                    \"ourReference\": ourReference,",
									"                                    \"clientLevel\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].clientLevel,",
									"                                    \"clientTariff\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].clientTariff,",
									"                                    \"clientScheme\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].clientScheme,",
									"                                    \"tierGroup\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].tierGroup,",
									"                                    \"chargeTierLevel\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].chargeTierLevel,",
									"                                    \"businessClass\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].businessClass,",
									"                                    \"settlementPackages\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].settlementPackages,",
									"                                    \"accountDefinitions\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].accountDefinitions,",
									"                                    \"addressCategories\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].addressCategories",
									"                                });",
									"                subParentClient = \"clientNumber=\" + String(clientNumber);",
									"                clientNumber = String(Number(clientNumber) + 1);",
									"                ourReference = String(Number(ourReference) + 1);",
									"",
									"                for (member = 0; member < onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members.length; member++)",
									"                {   ",
									"                    for (total = 0; total < onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].no_of_stores; total++)",
									"                    {",
									"                        processing.push({   \"hierarchy\": true,",
									"                                            \"serviceContractId\": onboardingMerchants[i].serviceContractId,",
									"                                            \"clientNumber\": clientNumber,",
									"                                            \"parentClientNumber\": subParentClient,",
									"                                            \"ourReference\": ourReference,",
									"                                            \"clientLevel\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].clientLevel,",
									"                                            \"clientTariff\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].clientTariff,",
									"                                            \"clientScheme\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].clientScheme,",
									"                                            \"settlementMethod\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].settlementMethod,",
									"                                            \"tradeName\" : onboardingMerchants[i].groupLevel.subGroupLevel[0].Members[member].tradeName,",
									"                                            \"tierGroup\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].tierGroup,",
									"                                            \"chargeTierLevel\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].chargeTierLevel,",
									"                                            \"businessClass\" : onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].businessClass,",
									"                                            \"settlementPackages\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].settlementPackages,",
									"                                            \"accountDefinitions\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].accountDefinitions,",
									"                                            \"addressCategories\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].addressCategories,",
									"                                            \"services\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].services,",
									"                                            \"deviceFees\": onboardingMerchants[i].groupLevel.subGroupLevel[subgroup].Members[member].deviceFees",
									"                                        });",
									"                        clientNumber = String(Number(clientNumber) + 1);",
									"                        ourReference = String(Number(ourReference) + 1);",
									"                    }",
									"                }",
									"            }",
									"        }",
									"}",
									"pm.environment.set(\"applications\",processing);",
									"postman.clearEnvironmentVariable(\"onboardingMerchants\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Enigma1!",
									"type": "string"
								},
								{
									"key": "username",
									"value": "alto-api",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}oauth2/token",
							"host": [
								"{{hostName}}{{contextRoot}}oauth2"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Contracts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 200 for Contract Definitions\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"    accountDefinitions = {}; ",
									"    serviceDefinitions = {};",
									"    latestService = \"\";",
									"",
									"for (ad = 0; ad < data.data.relationships.accountDefinitions.data.length; ad++)",
									"{",
									"    accountDefinitions[data.data.relationships.accountDefinitions.data[ad].id.substring(14,17)] = data.data.relationships.accountDefinitions.data[ad].id;",
									"}",
									"for (sd = 0; sd < data.data.relationships.serviceDefinitions.data.length; sd++)",
									"{",
									"    serviceDefinitions[data.data.relationships.serviceDefinitions.data[sd].id.substring(10,13)] = data.data.relationships.serviceDefinitions.data[sd].id;",
									"    latestService = data.data.relationships.serviceDefinitions.data[sd].id;",
									"    if (latestService.substring(101) > data.data.relationships.serviceDefinitions.data[sd].id.substring(101) && ",
									"        latestService.substring(0,13) == data.data.relationships.serviceDefinitions.data[sd].id.substring(0,13))",
									"    {",
									"        serviceDefinitions[data.data.relationships.serviceDefinitions.data[sd].id.substring(10,13)] = latestService;",
									"    }",
									"}                ",
									"",
									"pm.environment.set(\"accountDefinitions\",accountDefinitions);",
									"pm.environment.set(\"serviceDefinitions\",serviceDefinitions);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/contractDefinitions/{{serviceContractId}}?include=accountDefinitions&include=serviceDefinitions",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"contractDefinitions",
								"{{serviceContractId}}"
							],
							"query": [
								{
									"key": "include",
									"value": "accountDefinitions"
								},
								{
									"key": "include",
									"value": "serviceDefinitions"
								},
								{
									"key": "filter[contractType]",
									"value": "002",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Processing Merchant for Live Txns",
			"item": [
				{
					"name": "Member Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout (function (){}, 30000);\r",
									"var applications = pm.environment.get(\"applications\");\r",
									"\r",
									"pm.environment.set(\"hierarchy\",applications[0].hierarchy);\r",
									"pm.environment.set(\"clientLevel\",applications[0].clientLevel);\r",
									"pm.environment.set(\"parentClientNumber\",applications[0].parentClientNumber);\r",
									"pm.environment.set(\"clientNumber\",applications[0].clientNumber);\r",
									"pm.environment.set(\"ourReference\",applications[0].ourReference);\r",
									"pm.environment.set(\"clientTariff\",applications[0].clientTariff);\r",
									"pm.environment.set(\"clientScheme\",applications[0].clientScheme);\r",
									"pm.environment.set(\"tradeName\",applications[0].tradeName);\r",
									"pm.environment.set(\"settlementMethod\",applications[0].settlementMethod);\r",
									"pm.environment.set(\"tierGroup\",applications[0].tierGroup);\r",
									"pm.environment.set(\"chargeTierLevel\",applications[0].chargeTierLevel);\r",
									"pm.environment.set(\"businessClass\",applications[0].businessClass);\r",
									"pm.environment.set(\"settlements\",applications[0].settlementPackages);\r",
									"pm.environment.set(\"accounts\",applications[0].accountDefinitions);\r",
									"pm.environment.set(\"addresses\",applications[0].addressCategories);\r",
									"\r",
									"if (applications[0].clientLevel == \"001\")\r",
									"    {\r",
									"        pm.environment.set(\"services\",applications[0].services);\r",
									"        pm.environment.set(\"deviceFees\",applications[0].deviceFees);\r",
									"    }\r",
									"\r",
									"applications.shift();\r",
									"pm.environment.set(\"applications\",applications);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"pm.environment.set(\"merchantId\", data.data.id);",
									"pm.environment.set(\"counter\",0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\": {\n\t\t\"type\": \"merchants\",\n\t\t\"attributes\": {\n\t\t\t\"registrationNumber\": \"000000000000000\",\n\t\t\t\"businessClass\": \"{{businessClass}}\",\n\t\t\t\"clientNumber\": \"{{clientNumber}}\",\n\t\t\t\"language\": \"001\",\n\t\t\t\"legalForm\": \"001\",\n\t\t\t\"vatRegistrationNumber\": \"DVC000000000001\",\n\t\t\t\"ourReference\": \"{{ourReference}}\",\n\t\t\t\"residenceStatus\": \"001\",\n\t\t\t\"mainContactDetails\": {\n\t\t\t\t\"contactName\": \"CONTACT NAME AAAAAAAAAAAAAAAAAAAAAA\",\n\t\t\t\t\"mobile1\": \"+62933620760000\",\n                \"mobile2\": \"+62933620760000\",\n                \"serviceTelephone\": \"+62933620760000\"\n\t\t\t},\n            \"rbsClientNumber\": \"00000000000000000020\",\n            \"shortName\": \"SHORT NAME 000000000000026\",\n            \"firstName\": \"FIRST NAME AAAA\",\n            \"middleName\": \"MIDDLE NAME AAA\",\n            \"lastName\": \"LAST NAME AAAAAAAAAAAAAAAA\",\n\t\t\t\"tradeName\": \"{{tradeName}}\",\n\t\t\t\"companyName\": \"COMPANY NAME 00000000000000000000000000000045\",\n\t\t\t\"eCommerceIndicator\": \"002\",\n\t\t\t\"taxCountry\": \"IDN\",\n\t\t\t\"processingRegion\": \"000\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/merchants",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"merchants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Member Addendum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"    clientLevel = pm.environment.get(\"clientLevel\");",
									"    hierarchy = pm.environment.get(\"hierarchy\");",
									"",
									"",
									"",
									"if (clientLevel == \"002\")",
									"{",
									"    postman.setNextRequest(\"Member Contract\");",
									"}",
									"else",
									"{",
									"    if (clientLevel == \"001\" && hierarchy == false)",
									"    {",
									"        postman.setNextRequest(\"Member Contract\");",
									"    }",
									"    else",
									"    {",
									"        postman.setNextRequest(\"Parent Contract\");",
									"    }   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\" : {\n        \"type\": \"merchantsAddendum\",\n        \"attributes\": {\n            \"visaInterchangeProgram\": \"ABCDE45890\",\n            \"visaInterchangeProgramQualification\": \"005\",\n            \"mastercardInterchangeProgram\": \"418587\",\n            \"mastercardInterchangeProgramQualification\": \"005\"\n        },\n        \"relationships\" : {\n\t    \t\"merchant\" : {\n\t    \t\t\"data\" : {\n\t    \t\t\t\"type\" : \"merchants\",\n\t    \t\t\t\"id\" : \"{{merchantId}}\"\n\t    \t\t}\n    \t\t}\n\t    }    \n\t    }\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/merchantsAddendum",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"merchantsAddendum"
							]
						}
					},
					"response": []
				},
				{
					"name": "Parent Contract",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"parentContractId\", data.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/merchants/{{parentClientNumber}}/contracts?include=contractDefinition",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"merchants",
								"{{parentClientNumber}}",
								"contracts"
							],
							"query": [
								{
									"key": "include",
									"value": "contractDefinition"
								}
							]
						},
						"description": "Should only be done when boarding a merchant at sub-group or member level. This is done to search for its desired parent contract."
					},
					"response": []
				},
				{
					"name": "Member Contract",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var clientLevel = pm.environment.get(\"clientLevel\");\r",
									"    hierarchy = pm.environment.get(\"hierarchy\");\r",
									"\r",
									"if (clientLevel == \"002\") \r",
									"{\r",
									"        pm.environment.set(\"DefRelationship\", \"contractDefinition\");\r",
									"        pm.environment.set(\"RelationshipType\", \"contractDefinitions\");\r",
									"        pm.environment.set(\"RelationshipId\", pm.environment.get(\"serviceContractId\"));\r",
									"}\r",
									"\r",
									"if (clientLevel == \"003\") \r",
									"{\r",
									"        pm.environment.set(\"DefRelationship\", \"parentContracts\");\r",
									"        pm.environment.set(\"RelationshipType\", \"contracts\");\r",
									"        pm.environment.set(\"RelationshipId\", pm.environment.get(\"parentContractId\"));\r",
									"}\r",
									"\r",
									"if (clientLevel == \"001\")\r",
									"{\r",
									"        if (hierarchy == true)\r",
									"        {\r",
									"                pm.environment.set(\"DefRelationship\", \"parentContracts\");\r",
									"                pm.environment.set(\"RelationshipType\", \"contracts\");\r",
									"                pm.environment.set(\"RelationshipId\", pm.environment.get(\"parentContractId\"));\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"                pm.environment.set(\"DefRelationship\", \"contractDefinition\");\r",
									"                pm.environment.set(\"RelationshipType\", \"contractDefinitions\");\r",
									"                pm.environment.set(\"RelationshipId\", pm.environment.get(\"serviceContractId\"));\r",
									"        }\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"    settlements = pm.environment.get(\"settlements\");",
									"    clientLevel = pm.environment.get(\"clientLevel\");",
									"",
									"pm.environment.set(\"contractId\", data.data.id);",
									"",
									"if (settlements.length == 0) ",
									"{",
									"        postman.setNextRequest(\"Accounts\");",
									"}",
									"else    ",
									"{",
									"        postman.setNextRequest(\"SettlementPackages\");",
									"}",
									"",
									"postman.clearEnvironmentVariable(\"DefRelationship\");",
									"postman.clearEnvironmentVariable(\"RelationshipType\");",
									"postman.clearEnvironmentVariable(\"RelationshipId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"contracts\",\n        \"attributes\": {\n            \"clientTariff\": \"{{clientTariff}}\",\n            \"clientScheme\": \"{{clientScheme}}\",\n            \"clientLevel\": \"{{clientLevel}}\",\n            \"settlementMethod\": \"{{settlementMethod}}\",\n            \"clientBranch\": \"000\",\n            \"institutionAccountOfficer\": \"000\",\n            \"postingMethod\": \"001\",\n            \"tierGroup\": \"{{tierGroup}}\",\n            \"chargeTierLevel\": \"{{chargeTierLevel}}\"\n        },\n        \"relationships\": {\n            \"merchant\": {\n                \"data\": {\n                    \"type\": \"merchants\",\n                    \"id\": \"{{merchantId}}\"\n                }\n            },\n            \"{{DefRelationship}}\": {\n                \"data\": {\n                    \"type\": \"{{RelationshipType}}\",\n                    \"id\": \"{{RelationshipId}}\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/contracts",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"contracts"
							]
						}
					},
					"response": []
				},
				{
					"name": "SettlementPackages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"    counter = pm.environment.get(\"counter\");",
									"    settlements = pm.environment.get(\"settlements\");",
									"    accounts = pm.environment.get(\"accounts\");",
									"",
									"for (i = 0; i < accounts.length; i++)",
									"{",
									"    if (accounts[i].accountType == settlements[counter].accountType)",
									"    {",
									"        accounts[i].settlementPackageId = data.data.id;",
									"    }",
									"}",
									"",
									"if ((counter + 1) < settlements.length)",
									"{",
									"    counter = counter + 1;",
									"    postman.setNextRequest(\"SettlementPackages\");",
									"}",
									"else",
									"{",
									"    counter = 0;",
									"    postman.setNextRequest(\"Accounts\");",
									"}",
									"",
									"pm.environment.set(\"counter\",counter);",
									"pm.environment.set(\"accounts\",accounts);",
									"postman.clearEnvironmentVariable(\"counterBankAccount\");",
									"postman.clearEnvironmentVariable(\"fundingClient\");",
									"postman.clearEnvironmentVariable(\"accountType\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var settlements = pm.environment.get(\"settlements\");\r",
									"    counter = pm.environment.get(\"counter\");\r",
									"\r",
									"pm.environment.set(\"counterBankAccount\",settlements[counter].bankAccount);\r",
									"pm.environment.set(\"fundingClient\",settlements[counter].fundingClient);\r",
									"pm.environment.set(\"accountType\",settlements[counter].accountType);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"type\": \"settlementPackages\",\r\n    \"attributes\": {\r\n        \"accountCurrency\": \"IDR\",\r\n        \r\n        \"payableDetails\" : {\r\n        \t\t\t\"counterBankAccountName\": \"COUNTER BANK ACCOUNT NAME\",\r\n\t                \"counterBankAccount\": \"{{counterBankAccount}}\"\r\n\t        }\r\n        },\r\n    \"relationships\": {\r\n      \"merchant\": {\r\n        \"data\": {\r\n          \"type\": \"merchants\",\r\n          \"id\": \"{{merchantId}}\"\r\n        }\r\n      },\r\n      \"fundingClient\": {\r\n        \"data\": {\r\n          \"type\": \"fundingClients\",\r\n          \"id\": \"{{fundingClient}}\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/settlementPackages",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"settlementPackages"
							]
						},
						"description": "Should only be done for billing-level accounts."
					},
					"response": []
				},
				{
					"name": "Accounts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var accountDefinitions = pm.environment.get(\"accountDefinitions\");\r",
									"    accounts = pm.environment.get(\"accounts\");\r",
									"    counter = pm.environment.get(\"counter\");\r",
									"    main_relationships = { \"contracts\": { \"data\":   [{ \"type\": \"contracts\", \"id\": pm.environment.get(\"contractId\") }]  }   };\r",
									"\r",
									"pm.environment.set(\"settlementPackageId\",accounts[counter].settlementPackageId);\r",
									"pm.environment.set(\"statementType\",accounts[counter].statementType);\r",
									"pm.environment.set(\"accountType\",accounts[counter].accountType);\r",
									"main_relationships[\"accountDefinition\"] = { \"data\": { \"type\": \"accountDefinitions\", \"id\": accountDefinitions[accounts[counter].accountType] }   };\r",
									"\r",
									"if (accounts[counter].settlementPackageId !== \"\")\r",
									"{\r",
									"    main_relationships[\"settlementPackage\"] = { \"data\": { \"type\": \"settlementPackages\", \"id\": accounts[counter].settlementPackageId }  };\r",
									"}\r",
									"\r",
									"pm.environment.set(\"accountRelationships\", JSON.stringify(main_relationships));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var accounts = pm.environment.get(\"accounts\");\r",
									"    counter = pm.environment.get(\"counter\");\r",
									"\r",
									"if ((counter + 1) < accounts.length)\r",
									"{\r",
									"    counter = counter + 1;\r",
									"    postman.setNextRequest(\"Accounts\");\r",
									"}\r",
									"else\r",
									"{\r",
									"    counter = 0;\r",
									"    postman.setNextRequest(\"Addresses\");\r",
									"}\r",
									"\r",
									"pm.environment.set(\"counter\",counter);\r",
									"postman.clearEnvironmentVariable(\"accountRelationships\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"type\": \"accounts\",\r\n    \"attributes\": {\r\n      \"clientAccountName\": \"LENGTH AAAAAAAAAAAAAAAAAAAAAAAAAAAA\",\r\n      \"statementGeneration\": \"007\",\r\n      \"accountType\": \"{{accountType}}\",\r\n      \"statementType\": \"{{statementType}}\"\r\n    },\r\n    \"relationships\": {{accountRelationships}}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/accounts",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"    addresses = pm.environment.get(\"addresses\");",
									"    counter = pm.environment.get(\"counter\");",
									"",
									"if ((counter + 1) < addresses.length)",
									"{",
									"    counter = counter + 1;",
									"    postman.setNextRequest(\"Addresses\");",
									"}",
									"else",
									"{",
									"    counter = 0;",
									"    if (pm.environment.get(\"clientLevel\") == \"001\")",
									"    {",
									"        postman.setNextRequest(\"Services\");",
									"    }",
									"    else",
									"    {",
									"        postman.setNextRequest(\"Process Application\");",
									"    }",
									"}",
									"",
									"pm.environment.set(\"counter\",counter);",
									"postman.clearEnvironmentVariable(\"addressCategory\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var addresses = pm.environment.get(\"addresses\");\r",
									"    counter = pm.environment.get(\"counter\");\r",
									"\r",
									"pm.environment.set(\"addressCategory\",addresses[counter]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"type\": \"addresses\",\r\n    \"attributes\": {\r\n        \"addressCategory\" : \"{{addressCategory}}\",\r\n        \"contactName\" : \"CONTACT NAME AAAAAAAAAAAAAAAAAAAAAA\",\r\n        \"addressLine1\" : \"ADDRESS LINE 1 AAAAAAAAAAAAAAAAAAAA\",\r\n        \"addressLine2\" : \"ADDRESS LINE 2 AAAAAAAAAAAAAAAAAAAA\",\r\n        \"addressLine3\" : \"ADDRESS LINE 3 AAAAAAAAAAAAAAAAAAAA\",\r\n        \"addressLine4\" : \"ADDRESS LINE 4 AAAAAAAAAAAAAAAAAAAA\",\r\n        \"addressLine5\" : \"ADDRESS LINE 5 AAAAAAAAAAAAAAAAAAAA\",\r\n        \"city\" : \"Jakarta\",\r\n        \"postCode\" : \"POST000000\",\r\n        \"country\" : \"IDN\",\r\n        \"telephone1\" : \"+62933620760000\",\r\n        \"telephone2\" : \"+62933620760000\",\r\n        \"emailAddress\" : \"EMAILADDRESS0000000000000000000000000000000000060@EMAIL.COM\",\r\n        \"deliveryMethod\" : \"000\"\r\n    },\r\n    \"relationships\": {\r\n      \"merchant\": {\r\n        \"data\": {\r\n          \"type\": \"merchants\",\r\n          \"id\": \"{{merchantId}}\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/addresses",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;",
									"",
									"var data = JSON.parse(responseBody);",
									"    services = pm.environment.get(\"services\");",
									"    counter = pm.environment.get(\"counter\");",
									"",
									"if (services[counter].serviceId == \"300\")",
									"{",
									"    pm.environment.set(\"deviceServiceId\",data.data.id);",
									"}",
									"",
									"if ((counter + 1) < services.length)",
									"{",
									"    counter = counter + 1;",
									"    postman.setNextRequest(\"Services\");",
									"}",
									"else",
									"{",
									"    counter = 0;",
									"    postman.setNextRequest(\"Process Application\");",
									"}",
									"",
									"pm.environment.set(\"counter\",counter);",
									"postman.clearEnvironmentVariable(\"serviceTariff\");",
									"postman.clearEnvironmentVariable(\"serviceDefinition\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var serviceDefinitions = pm.environment.get(\"serviceDefinitions\");\r",
									"    services = pm.environment.get(\"services\");\r",
									"    counter = pm.environment.get(\"counter\");\r",
									"\r",
									"pm.environment.set(\"serviceTariff\", services[counter].tariff);\r",
									"pm.environment.set(\"serviceDefinition\", serviceDefinitions[services[counter].serviceId]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"services\",\n    \"attributes\": {\n        \"clientTariff\" : \"{{serviceTariff}}\"\n    },\n    \"relationships\": {\n      \"serviceDefinitions\": {\n        \"data\": [\n\t        {\n\t          \"type\": \"serviceDefinitions\",\n\t          \"id\": \"{{serviceDefinition}}\"\n\t        }\n        ]\n      },\n      \"contracts\": {\n        \"data\": [\n          {\n            \"type\": \"contracts\",\n            \"id\": \"{{contractId}}\"\n          }\n        ]\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/services",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"    applications = pm.environment.get(\"applications\");\r",
									"    serviceContractId = pm.environment.get(\"serviceContractId\");\r",
									"    clientLevel = pm.environment.get(\"clientLevel\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\": {\n\t\t\"id\" : \"{{merchantId}}\",\n\t\t\"type\": \"merchants\",\n\t\t\"attributes\": {\n\t\t    \"status\" : \"001\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/merchants/{{merchantId}}",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Devices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status Code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"if (applications.length == 0)\r",
									"{\r",
									"    postman.setNextRequest(\"Ending\");\r",
									"}\r",
									"else\r",
									"{\r",
									"        if (applications[0].serviceContractId == serviceContractId)\r",
									"        {\r",
									"            postman.setNextRequest(\"Member Details\");\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"            pm.environment.set(\"serviceContractId\",applications[0].serviceContractId);\r",
									"            postman.setNextRequest(\"Service Contracts\");\r",
									"        }\r",
									"    \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Crnk-Compact",
								"type": "text",
								"value": "true"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"type\": \"devices\",\r\n    \"attributes\": {\r\n      \"terminalId\": \"{{clientNumber}}\",\r\n      \"status\": \"001\",\r\n      \"currency\": \"IDR\",\r\n      \"posCapability\": \"003\",\r\n      \"endOfDayIndicator\": \"002\"\r\n    },\r\n    \"relationships\": {\r\n      \"services\": {\r\n        \"data\": {\r\n          \"type\": \"services\",\r\n          \"id\": \"{{deviceServiceId}}\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/devices",
							"host": [
								"{{hostName}}{{contextRoot}}{{serviceName}}"
							],
							"path": [
								"devices"
							]
						}
					},
					"response": [
						{
							"name": "GET device with deviceFeeDefinitions filtering only the related individual fee",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Crnk-Compact",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{hostName}}{{contextRoot}}{{serviceName}}/devices?include=deviceFeeDefinitions&filter[terminalId]=00001954&filter[deviceFeeDefinitions][isContractFee]=false",
									"host": [
										"{{hostName}}{{contextRoot}}{{serviceName}}"
									],
									"path": [
										"devices"
									],
									"query": [
										{
											"key": "include",
											"value": "deviceFeeDefinitions"
										},
										{
											"key": "filter[terminalId]",
											"value": "00001954"
										},
										{
											"key": "filter[deviceFeeDefinitions][isContractFee]",
											"value": "false"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "X-Powered-By",
									"value": "Undertow/1"
								},
								{
									"key": "Server",
									"value": "JBoss-EAP/7"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Mar 2020 11:56:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Type",
									"value": "application/vnd.api+json;charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1341"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"id\": \"clientNumber=00001953&terminalId=00001954\",\n            \"type\": \"devices\",\n            \"attributes\": {\n                \"serialNumber\": \"0123456791\",\n                \"contactName\": \"Contactless Member BA\",\n                \"endOfDayIndicator\": \"000\",\n                \"currency\": \"NZD\",\n                \"terminalId\": \"00001954\",\n                \"posCapability\": \"000\",\n                \"lastChangedDate\": \"2020-10-15\",\n                \"terminalType\": \"300\",\n                \"status\": \"001\"\n            },\n            \"relationships\": {\n                \"deviceFeeDefinitions\": {\n                    \"data\": [\n                        {\n                            \"id\": \"recordIdNumber=0000100133\",\n                            \"type\": \"deviceFeeDefinitions\"\n                        }\n                    ]\n                }\n            }\n        }\n    ],\n    \"included\": [\n        {\n            \"id\": \"recordIdNumber=0000100133\",\n            \"type\": \"deviceFeeDefinitions\",\n            \"attributes\": {\n                \"feeMode\": \"001\",\n                \"triggerRuleId\": \"000\",\n                \"isContractFee\": false,\n                \"clientTariff\": \"100002\",\n                \"feeMinimum\": {\n                    \"currency\": \"NZD\",\n                    \"value\": 0\n                },\n                \"expiryDate\": \"9999-12-31\",\n                \"recordIdNumber\": \"0000100133\",\n                \"feeMaximum\": {\n                    \"currency\": \"NZD\",\n                    \"value\": 0\n                },\n                \"periodReference\": \"001\",\n                \"referenceOperator\": \"001\",\n                \"feeBase\": {\n                    \"currency\": \"NZD\",\n                    \"value\": 30\n                },\n                \"fixedPeriod\": 0,\n                \"triggerPeriod\": \"021\",\n                \"triggerSource\": \"978\",\n                \"effectiveDate\": \"2021-12-11\",\n                \"triggerOperator\": \"000\"\n            }\n        }\n    ],\n    \"links\": {\n        \"first\": \"http://localhost:8080/wsm/jsonapi/devices?page[limit]=20&filter[deviceFeeDefinitions][isContractFee]=false&include=deviceFeeDefinitions&filter[terminalId]=00001954\",\n        \"last\": \"http://localhost:8080/wsm/jsonapi/devices?page[limit]=20&filter[deviceFeeDefinitions][isContractFee]=false&include=deviceFeeDefinitions&filter[terminalId]=00001954\"\n    },\n    \"meta\": {\n        \"totalResourceCount\": 1\n    }\n}"
						}
					]
				},
				{
					"name": "Ending",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Clear environmental variables which will be populated at test teardown",
									"postman.clearEnvironmentVariable(\"token\");",
									"postman.clearEnvironmentVariable(\"refresh_token\");",
									"postman.clearEnvironmentVariable(\"accountDefinitions\");",
									"postman.clearEnvironmentVariable(\"accountDefinitions\");",
									"postman.clearEnvironmentVariable(\"serviceContractId\");",
									"postman.clearEnvironmentVariable(\"accountDefinitions\");",
									"postman.clearEnvironmentVariable(\"serviceDefinitions\");",
									"postman.clearEnvironmentVariable(\"deviceFeeDefinitions\");",
									"postman.clearEnvironmentVariable(\"applications\");",
									"postman.clearEnvironmentVariable(\"counter\");",
									"postman.clearEnvironmentVariable(\"merchantId\");",
									"postman.clearEnvironmentVariable(\"parentContractId\");",
									"postman.clearEnvironmentVariable(\"clientLevel\");",
									"postman.clearEnvironmentVariable(\"clientNumber\");",
									"postman.clearEnvironmentVariable(\"ourReference\");",
									"postman.clearEnvironmentVariable(\"clientTariff\");",
									"postman.clearEnvironmentVariable(\"clientScheme\");",
									"postman.clearEnvironmentVariable(\"tradeName\");",
									"postman.clearEnvironmentVariable(\"settlementMethod\");",
									"postman.clearEnvironmentVariable(\"tierGroup\");",
									"postman.clearEnvironmentVariable(\"chargeTierLevel\");",
									"postman.clearEnvironmentVariable(\"settlements\");",
									"postman.clearEnvironmentVariable(\"accounts\");",
									"postman.clearEnvironmentVariable(\"addresses\");",
									"postman.clearEnvironmentVariable(\"services\");",
									"postman.clearEnvironmentVariable(\"deviceFees\");",
									"postman.clearEnvironmentVariable(\"hierarchy\");",
									"postman.clearEnvironmentVariable(\"contractId\");",
									"postman.clearEnvironmentVariable(\"accountType\");",
									"postman.clearEnvironmentVariable(\"settlementPackageId\");",
									"postman.clearEnvironmentVariable(\"statementType\");",
									"postman.clearEnvironmentVariable(\"deviceFeeDefinition\");",
									"postman.clearEnvironmentVariable(\"serviceId\");",
									"postman.clearEnvironmentVariable(\"deviceFeeId\");",
									"postman.clearEnvironmentVariable(\"subContractId\");",
									"postman.clearEnvironmentVariable(\"parentClientNumber\");",
									"postman.clearEnvironmentVariable(\"contractDefinitionId\");",
									"postman.clearEnvironmentVariable(\"onboardingMerchants\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for a successful status code",
									"tests[\"Status Code 200\"] = responseCode.code === 200;",
									"",
									"var data = JSON.parse(responseBody); // Parse response body",
									"",
									"tests[\"Valid Access Token\"] = data.access_token !== null && data.access_token !== \"\"; // Test for the presence of an access token",
									"tests[\"Valid Refresh Token\"] = data.refresh_token !== null && data.refresh_token !== \"\"; // Test for the presence of an refresh token",
									"tests[\"Valid Token Type\"] = data.token_type === \"bearer\"; // Test for a valid token type",
									"",
									"// Test teardown: Set global variables",
									"pm.environment.set(\"token\", data.access_token);",
									"pm.environment.set(\"refresh_token\", data.refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Enigma1!",
									"type": "string"
								},
								{
									"key": "username",
									"value": "alto-api",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hostName}}{{contextRoot}}oauth2/token",
							"host": [
								"{{hostName}}{{contextRoot}}oauth2"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}